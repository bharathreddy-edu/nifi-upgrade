description: |-
  *Replace this default text with instructions or other information about your document.*  

  ---
  # What is Markdown?
  Markdown is a lightweight markup language that converts your content with plain text formatting to structurally valid rich text.
  ## You can add headings
  You can add *italics* or make the font **bold**.  
  1. Create numbered lists 
  * Add bullet points 
  >Indent `code samples` 

  You can create a [link to another webpage](${ AWS_ENDPOINT }).
schemaVersion: '0.3'
parameters:
  ec2instanceidplaceholder:
    type: 'AWS::EC2::Instance::Id'
    default: i-0530b538bede8c0e8
  BASENIFIHOMEPATH:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/BASE_NIFI_HOMEPATH}}'
  nfS3DOWNLOADABSPATH:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/nifiS3_DOWNLOAD_ABSPATH}}'
  S3nfpathworkingABSPATH:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/S3_nifipath_working_ABSPATH}}'
  NFDownloadFilename:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/NIFI_Download_Filename}}'
  NIFIPORT:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/NIFI_PORT}}'
  nfserverlist:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/nfserverlist}}'
  oldnfversion:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/oldnfversion}}'
  newnfversion:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/newnfversion}}'
mainSteps:
  - name: stopNFService
    action: 'aws:runCommand'
    onFailure: Abort
    inputs:
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          #!/bin/bash
          echo "*********************Initiating stopNFService function*********************"; 
          dzdo service nifi stop;
          if [[ ${?} -eq 0 ]];
          then
          echo "NiFi is stopped";
          else
          echo "*********************Initiating extract_NF_pid function*********************"; 
          NF_PID_EXIST=`dzdo netstat -plten | grep {{NIFIPORT}} | awk '{print $9}' | awk -F / '{print $1}'`;
          if [[ ! -z ${NF_PID_EXIST} ]];
          then
          echo "Zookeeper is installed on this node";
          echo " Process Id is : ${NF_PID_EXIST} ";
          NF_INSTALLED=nf_installed;
          else
          echo "Zookeeper is not installed on this node";
          NF_INSTALLED=nf_notinstalled;
          exit 1;
          fi
          echo "checking if condition with variable NF_INSTALLED = ${NF_INSTALLED}";
          if [[ ${NF_INSTALLED} = "nf_installed" ]];
          then
          echo "Kill the existing zookeeper"; 
          dzdo kill -9 ${NF_PID_EXIST};
          fi
          echo "*********************END of extractNFpid_killzkpid function*********************"; 
          fi
          echo "*********************END of stopNFService function*********************";
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
    timeoutSeconds: 150
    nextStep: nf_s3Download
    isCritical: false
    description: 'Stopping Existing Service, if any'
  - name: nf_s3Download
    action: 'aws:runCommand'
    inputs:
      Parameters:
        commands: |-
          echo "*********************Initiating nf_s3Download function*********************";
          # create dir if it dose not exits
          dzdo mkdir -p {{BASENIFIHOMEPATH}};
          dzdo chown -R nifi:apache-admin {{BASENIFIHOMEPATH}};
          aws s3 cp {{nfS3DOWNLOADABSPATH}}/{{NFDownloadFilename}} {{BASENIFIHOMEPATH}}/;
          if [[ ${?} -ne 0 ]];
          then
          echo -e "AWS copy Failed, Please check and make sure you have permission to copy. \n Server/Host should able to download it from the bucket you specified without keys"
          exit 1;
          fi
          dzdo chown -R nifi:apache-admin {{BASENIFIHOMEPATH}};
          echo "*********************END of nf_s3Download function*********************";
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      DocumentName: AWS-RunShellScript
    timeoutSeconds: 150
    isCritical: false
    nextStep: nifi_Upgrade
    description: Downloading file from s3
  - name: nifi_Upgrade
    action: 'aws:runCommand'
    inputs:
      Parameters:
        commands: |-
          echo "*********************Initiating nifi_Upgrade function*********************";
          ls -lart {{BASENIFIHOMEPATH}}/{{NFDownloadFilename}};
          if [[ ${?} -ne 0 ]];
          then
          echo -e "File not available to extract"
          fi
          case {{NFDownloadFilename}} in
          (*.tar.gz*)
          (cd {{BASENIFIHOMEPATH}}/; dzdo tar -xvzf {{BASENIFIHOMEPATH}}/{{NFDownloadFilename}};)
          ;;
          (*.zip*)
          (cd {{BASENIFIHOMEPATH}}/; dzdo unzip {{BASENIFIHOMEPATH}}/{{NFDownloadFilename}};)
          ;;
          (*)
          echo " Invalid option, File name should be either tar.gz or zip extension"
          ;;
          esac
          # extracting the  file
          echo "extracting tar file"
          # extracting dir name from filename
          NIFIDownload_Dirname=`echo {{NFDownloadFilename}} | cut -d '-' -f 1-2`;
          #Copy conf from the previous version to new version.
          dzdo mv /opt/nifi/${NIFIDownload_Dirname}/conf /opt/nifi/${NIFIDownload_Dirname}/bkp_conf_`date '+%m-%d-%Y'`;
          dzdo cp -R ${{BASENIFIHOMEPATH}}/current_nifi/conf {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/;
          dzdo chown -R nifi:apache-admin /opt/nifi;
          dzdo chmod -R 755 /opt/nifi;
          echo "checking old version number"
          if [[ -L "{{BASENIFIHOMEPATH}}/current_nifi" ]];then
          old_number=`ls -l {{BASENIFIHOMEPATH}}/current_nifi | awk '{print $11}' | cut -d '/' -f '4' | cut -d '-' -f 2` ;
          new_number=`echo ${NIFIDownload_Dirname} | cut -d '-' -f 2`;
          fi
          echo "Old version is ${old_number}";
          echo "New version is ${new_number}";
          touch {{BASENIFIHOMEPATH}}/README.txt;
          echo "current version as of `date` is ${old_number}" >> {{BASENIFIHOMEPATH}}/README.txt;
          echo "new version as of `date` is ${new_number}" >> {{BASENIFIHOMEPATH}}/README.txt;
          #creating Symlink to currently installed nifi
          unlink {{BASENIFIHOMEPATH}}/current_nifi;
          dzdo ln -s {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname} {{BASENIFIHOMEPATH}}/current_nifi;
          dzdo chown -R nifi:apache-admin {{BASENIFIHOMEPATH}}/current_nifi;
          echo "*********************END of nifi_Upgrade function*********************";
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      DocumentName: AWS-RunShellScript
    description: upgrading the current NiFi
    timeoutSeconds: 150
    nextStep: nifi_flowfileupdate
    isCritical: false
  - name: nifi_flowfileupdate
    action: 'aws:runCommand'
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      Parameters:
        commands: |-
          echo "*********************Initiating nifi_flowfileupdate function*********************";
          echo "Backing up flow file"
          flowxml_path=`cat {{BASENIFIHOMEPATH}}/current_nifi/conf/nifi.properties | grep 'nifi.flow.configuration.file' | cut -d '=' -f 2`;
          flowxml_dir=`dirname ${flowxml_path}`;
          dzdo cp ${flowxml_path} ${flowxml_dir}/bkp_flow.xml.gz_`date '+%m-%d-%Y'`;
          echo "Updating flow file to with newer version";
          (cd ${flowxml_dir}; gunzip ${flowxml_path};)
          sed -i "s/>$oldnfversion</>$newnfversion</g" ${flowxml_dir}/flow.xml;
          (cd ${flowxml_dir}; gzip ${flowxml_dir}/flow.xml;)
          echo "Updated flow file and gziped it back";
          echo "*********************END of nifi_flowfileupdate function*********************";
    description: Flowfile update.
    timeoutSeconds: 150
    nextStep: nf_asService
    isCritical: false
  - name: nf_asService
    action: 'aws:runCommand'
    description: ' Creating NiFi as Service'
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      Parameters:
        commands: |-
          echo "*********************Initiating nf_asService*********************";
          dzdo sh {{BASENIFIHOMEPATH}}/current_nifi/bin/nifi.sh install
          echo "Created NiFi as service under /etc/init.d";
          sed -i 's/^NIFI_HOME=.*$/NIFI_HOME={{BASENIFIHOMEPATH}}\/current_nifi/g' /etc/init.d/nifi
          echo "*********************End of nf_asService*********************";
    timeoutSeconds: 150
    nextStep: startNFService
    isCritical: false
  - name: startNFService
    action: 'aws:runCommand'
    description: ' Starting NF Service'
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      Parameters:
        commands: |-
          echo "*********************Initiating startNFService*********************";
          dzdo service zookeeper start;
          if [[ ${?} -eq 0 ]];
          then
          echo "NiFi Service is started";
          else
          echo "NiFi Service has issue, please check the logs";
          fi
          echo "*********************End of startNFService*********************";
    timeoutSeconds: 150
    nextStep: success_failure_MSG
    isCritical: false
  - name: success_failure_MSG
    action: 'aws:runCommand'
    inputs:
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          echo "*********************Initiating success_failure_MSG function*********************";
          dzdo  netstat -plten | grep  {{NIFIPORT}};
          if [[ ${?} -eq 0 ]];
          then
          echo "NiFi is running";
          else
          echo "NiFi might got Upgraded, but there is trouble running the process";
          echo "Verify logs manually and  start the process.";
          fi
          echo "*********************END of success_failure_MSG function*********************";
    description: ' Printing Success Message'
    timeoutSeconds: 150
    isEnd: true
    isCritical: false
