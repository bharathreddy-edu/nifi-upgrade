description: |-
  *Replace this default text with instructions or other information about your document.*  

  ---
  # What is Markdown?
  Markdown is a lightweight markup language that converts your content with plain text formatting to structurally valid rich text.
  ## You can add headings
  You can add *italics* or make the font **bold**.  
  1. Create numbered lists 
  * Add bullet points 
  >Indent `code samples` 

  You can create a [link to another webpage](${ AWS_ENDPOINT }).
schemaVersion: '0.3'
parameters:
  ec2instanceidplaceholder:
    type: 'AWS::EC2::Instance::Id'
    description: (Required) List of instances you will be installing zookeeper service.
    default: i-0530b538bede8c0e8
  BASEZOOKEEPERHOMEPATH:
    type: String
    description: '(Required) Base location for zookeeper installation, do not update itBase location for zookeeper installation, do not update it.'
    default: '{{ssm:/nifi/zk_upgrade/param/BASE_ZOOKEEPER_HOMEPATH}}'
  S3DOWNLOADABSPATH:
    type: String
    description: (Required) s3 path from where we can download the tar file (do not put / at end).
    default: '{{ssm:/nifi/zk_upgrade/param/S3_DOWNLOAD_ABSPATH}}'
  S3zkpathworkingABSPATH:
    type: String
    description: '(Required) backup locationof a working zookeeper installation, do not update this path until necessary (do not put / at end).'
    default: '{{ssm:/nifi/zk_upgrade/param/S3_zkpath_working_ABSPATH}}'
  ZKDownloadFilename:
    type: String
    description: '(Required) apache zk tar filename, which you will be installing now.'
    default: '{{ssm:/nifi/zk_upgrade/param/ZKDownload_Filename}}'
  ZKPORT:
    type: String
    description: '(Required) zookeeper port, please use default port 2181, do not change it unless needed.'
    default: '{{ssm:/nifi/zk_upgrade/param/ZK_PORT}}'
  ZKSERVERCOUNT:
    type: String
    description: '(Required) server count, odd integer number, on how many servers you will be installing zookeeper service.'
    default: '{{ssm:/nifi/zk_upgrade/param/ZK_SERVER_COUNT}}'
  zkserverlist:
    type: String
    description: '(Required) true, if you need to install zookeeper service on the server. false, if you dont want to install zookeeper service on the server.'
    default: '{{ssm:/nifi/zk_upgrade/param/new_zkServer1}}'
mainSteps:
  - name: cleanup_forfreshInstall
    action: 'aws:runCommand'
    onFailure: Abort
    inputs:
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          echo "*********************Initiating cleanup_forfreshInstall function*********************";
          temp_cdir=bkp_zoo_`date '+%m-%d-%Y_%N'`;
          dzdo mkdir -p /tmp/cleanup/${temp_cdir};
          dzdo chmod -R 777 /tmp/cleanup;
          dzdo mv {{BASEZOOKEEPERHOMEPATH}} /tmp/cleanup/${temp_cdir}/;
          dzdo mv /data/zk_d1/zookeeper /tmp/cleanup/${temp_cdir}/;
          unset temp_cdir fntoedit ZK_PID_EXIST oldname nametoChange;
          echo "*********************END of cleanup_forfreshInstall function*********************";
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
    timeoutSeconds: 150
    nextStep: userCreation
    isCritical: false
    description: Clean-up script to make sure we can rerun the fresh installation
  - name: userCreation
    action: 'aws:runCommand'
    inputs:
      Parameters:
        commands: |-
          echo "*********************Initiating userCreation function*********************";
          # Creating  zookeeper users and their home dirs
          useradd -m zookeeper;
          # Creating group named "apache-admin" & Adding users to it
          groupadd apache-admin;
          usermod -a -G apache-admin zookeeper;
          # Creating zookeeper dir and nifi dir
          dzdo mkdir -p {{BASEZOOKEEPERHOMEPATH}};dzdo chown -R zookeeper:apache-admin {{BASEZOOKEEPERHOMEPATH}};
          echo "*********************END of userCreation function*********************";
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      DocumentName: AWS-RunShellScript
    timeoutSeconds: 150
    isCritical: false
    nextStep: zk_s3Download
    description: creating required user and group on the server
  - name: zk_s3Download
    action: 'aws:runCommand'
    inputs:
      Parameters:
        commands: |-
          echo "*********************Initiating zk_s3Download function*********************";
          # create dir if it dose not exits
          dzdo mkdir -p  {{BASEZOOKEEPERHOMEPATH}};
          dzdo chown -R zookeeper:apache-admin  {{BASEZOOKEEPERHOMEPATH}};
          aws s3 cp {{S3DOWNLOADABSPATH}}/{{ZKDownloadFilename}} {{BASEZOOKEEPERHOMEPATH}}/;
          if [[ ${?} -ne 0 ]];
          then
          echo -e "AWS copy Failed, Please check and make sure you have permissions to copy. \n Server/Host should able to download it from the bucket you specified without keys"
          exit 1;
          fi
          dzdo chown -R zookeeper:apache-admin  {{BASEZOOKEEPERHOMEPATH}};
          echo "*********************END of zk_s3Download function*********************";
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      DocumentName: AWS-RunShellScript
    description: download the tar file from s3
    timeoutSeconds: 150
    nextStep: fresh_installZK
    isCritical: false
  - name: fresh_installZK
    action: 'aws:runCommand'
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      Parameters:
        commands: |-
          echo "*********************Initiating fresh_installZK function*********************";
          #Creating Keytab Dir
          dzdo mkdir -p /etc/security/keytabs;
          dzdo chmod  755 /etc/security/keytabs;
          # Creating Data-dir for zookeeper
          dzdo mkdir -p /data/zk_d1/zookeeper;
          dzdo chown -R zookeeper:zookeeper /data/zk_d1;
          # Creating /var/run/zookeeper for zookeeper
          dzdo mkdir -p /var/run/zookeeper;
          dzdo chmod -R 755 /var/run/zookeeper;
          dzdo chown -R zookeeper:apache-admin /var/run/zookeeper;
          dzdo mkdir -p /var/log/zookeeper;
          dzdo chmod -R 755 /var/log/zookeeper;
          dzdo chown -R zookeeper:apache-admin /var/log/zookeeper;
          # extracting dir name from filename
          ZKDownload_Dirname=`echo {{ZKDownloadFilename}} | cut -d '.' -f 1-3`;
          # Extracting zookeeper from tar file
          (cd /opt/zookeeper/;dzdo tar -xvzf {{BASEZOOKEEPERHOMEPATH}}/{{ZKDownloadFilename}};)
          #copying conf from s3 to new path
          cd /opt/zookeeper/; ls -l {{BASEZOOKEEPERHOMEPATH}}/;
          echo "backing conf from new installation"
          dzdo mv {{BASEZOOKEEPERHOMEPATH}}/${ZKDownload_Dirname}/conf {{BASEZOOKEEPERHOMEPATH}}/${ZKDownload_Dirname}/bkpORG_conf_`date '+%m-%d-%Y_%N'`;
          echo "running aws cp comamnd to copy conf to new installation"
          dzdo aws s3 cp {{S3zkpathworkingABSPATH}}/conf {{BASEZOOKEEPERHOMEPATH}}/${ZKDownload_Dirname}/conf/ --recursive ;
          dzdo chown -R zookeeper:apache-admin {{BASEZOOKEEPERHOMEPATH}};
          dzdo chmod -R 755 {{BASEZOOKEEPERHOMEPATH}};
          #creating Symlink to currently installed zookeeper
          unlink {{BASEZOOKEEPERHOMEPATH}}/current_zookeeper;
          dzdo ln -s {{BASEZOOKEEPERHOMEPATH}}/${ZKDownload_Dirname} {{BASEZOOKEEPERHOMEPATH}}/current_zookeeper;
          dzdo chown -R zookeeper:apache-admin {{BASEZOOKEEPERHOMEPATH}};
          echo "*********************END of fresh_installZK function*********************";
    description: fresh_installZK step for installing for first time on this server
    timeoutSeconds: 150
    nextStep: createZKKeytabs
    isCritical: false
  - name: createZKKeytabs
    action: 'aws:runCommand'
    description: ' Starting Zk Service'
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      Parameters:
        commands: |-
          echo "*********************Initiating createZKKeytabs*********************";
          #Creating Zookeeper Keytab
          echo "creating  zookeeper and spenigo keytabs"
          dzdo cd /opt/kerberos_Creationfiles;
          (dzdo cd /opt/kerberos_Creationfiles ; dzdo sh /opt/kerberos_Creationfiles/bias-create-svc-user.sh /etc/security/keytabs/zk.service.keytab "zookeeper/${HOSTNAME}@DS.DTVENG.NET";)
          (dzdo cd /opt/kerberos_Creationfiles ; dzdo sh /opt/kerberos_Creationfiles/bias-create-svc-user.sh /etc/security/keytabs/spnego.service.keytab "HTTP/${HOSTNAME}@DS.DTVENG.NET";)
          # Permission for keytabs
          dzdo chmod 754 /etc/security/keytabs;
          dzdo chown -R  zookeeper:apache-admin /etc/security/keytabs/zk.service.keytab;
          dzdo chmod 744 /etc/security/keytabs/zk.service.keytab;
          dzdo chmod 744 /etc/security/keytabs/spnego.service.keytab;
          dzdo chown -R  root:apache-admin /etc/security/keytabs/spnego.service.keytab;
          dzdo ls -lart /etc/security/keytabs;
          echo "*********************End of createZKKeytabs*********************";
    timeoutSeconds: 150
    nextStep: change_zkconf
    isCritical: false
  - name: change_zkconf
    action: 'aws:runCommand'
    description: ' Updating  conf dir and its properties w.r.to Zk Service'
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      Parameters:
        commands: |-
          echo "*********************Initiating change_zkconf function*********************";
          ZKDownload_Dirname=`echo {{ZKDownloadFilename}} | cut -d '.' -f 1-3`;
          echo "updating clientPortalAddress in zoo.cfg"
          sed -i "s/^clientPortAddress=.*$/clientPortAddress=${HOSTNAME}/" {{BASEZOOKEEPERHOMEPATH}}/${ZKDownload_Dirname}/conf/zoo.cfg;
          echo "Removing line from zoo.cfg and zoo.cfg.dynamic with pattern server.[0-9]";
          sed -i '/server\.[0-9]=/d' {{BASEZOOKEEPERHOMEPATH}}/${ZKDownload_Dirname}/conf/zoo.cfg ;
          sed -i '/server\.[0-9]=/d' {{BASEZOOKEEPERHOMEPATH}}/${ZKDownload_Dirname}/conf/zoo.cfg.dynamic ;
          echo "#Adding server info" >> {{BASEZOOKEEPERHOMEPATH}}/${ZKDownload_Dirname}/conf/zoo.cfg ;
          echo " zookeeper server list = {{zkserverlist}}";
          zkserverList_temp=`echo {{zkserverlist}} | sed 's/,/\ /g'`;
          echo "using for loop to update the config";
          varzkcount=0;
          for i in ${zkserverList_temp};
          do
          varzkcount=$((varzkcount + 1));
          echo "server.$varzkcount=${i}:2888:3888:participant" >> {{BASEZOOKEEPERHOMEPATH}}/${ZKDownload_Dirname}/conf/zoo.cfg ;
          echo "server.$varzkcount=${i}:2888:3888:participant" >> {{BASEZOOKEEPERHOMEPATH}}/${ZKDownload_Dirname}/conf/zoo.cfg.dynamic ;
          done;
          echo "updating zk jaas conf"
          tf1=`klist -kt /etc/security/keytabs/zk.service.keytab | grep zookeeper | awk '{print $4}'  | cut -d '/' -f 1`;
          tf2=`klist -kt /etc/security/keytabs/zk.service.keytab | grep zookeeper | awk '{print $4}' | cut -d '/' -f 2`;
          sed -i "s/^.*principal=.*$/principal=\"${tf1}\/${tf2}\";/" {{BASEZOOKEEPERHOMEPATH}}/current_zookeeper/conf/zookeeper_jaas.conf;  
          echo "*********************END of change_zkconf function*********************";
    timeoutSeconds: 150
    nextStep: zk_asService
    isCritical: false
  - name: zk_asService
    action: 'aws:runCommand'
    description: ' Starting Zk Service'
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      Parameters:
        commands: |-
          echo "*********************Initiating zk_asService function*********************";
          SVC_NAME=zookeeper
          initd_dir='/etc/init.d'
          SVC_FILE="${initd_dir}/${SVC_NAME}"
          if [ ! -w  "${initd_dir}" ]; then
          echo "Current user does not have write permissions to ${initd_dir}. Cannot install NiFi as a service."
          exit 1;
          fi
          #removing existing file in init.d
          if [ -f "$SVC_FILE"];
          then
          echo "removing existing service file form /etc/init.d";
          dzdo rm  -f  ${SVC_FILE};
          fi
          echo "creating service file at ${SVC_FILE}"
          # Create the init script, overwriting anything currently present
          dzdo cat <<SERVICEDESCRIPTOR > ${SVC_FILE}
          #!/bin/sh
          # description: Apache Zookeeper ZooKeeper is a centralized service for maintaining configuration information, 
          # naming, providing distributed synchronization, and providing group services.
          # Make use of the configured ZOOKEEPER_HOME directory and pass service requests to the zkServer.sh 
          # executable
          ZOOKEEPER_HOME=/opt/zookeeper/current_zookeeper
          bin_dir=\${ZOOKEEPER_HOME}/bin
          zookeeper_executable=\${bin_dir}/zkServer.sh
          \${zookeeper_executable} "\$@"
          SERVICEDESCRIPTOR
          dzdo chmod 755 ${SVC_FILE};
          echo "*********************END of zk_asService function*********************";
    timeoutSeconds: 150
    nextStep: startZKService
    isCritical: false
  - name: startZKService
    action: 'aws:runCommand'
    description: ' Starting Zk Service'
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      Parameters:
        commands: |-
          echo "*********************Initiating startZKService*********************";
          dzdo service zookeeper start;
          if [[ ${?} -eq 0 ]];
          then
          echo "Started zookeeper";
          else
          echo "Unable to start zookeeper at this time.";
          echo "Please configure zookeeper as service.";
          fi
          echo "*********************End of startZKService*********************";
          dzdo chown -R zookeeper:apache-admin /var/run/zookeeper;
          dzdo chown -R zookeeper:apache-admin {{BASEZOOKEEPERHOMEPATH}};
          dzdo chmod -R 755 /var/run/zookeeper;
          dzdo chmod -R 755 /var/log/zookeeper;
          dzdo chmod -R 755 /opt/zookeeper;
          dzdo chown -R zookeeper:apache-admin /var/log/zookeeper;
    timeoutSeconds: 150
    nextStep: success_failure_MSG
    isCritical: false
  - name: success_failure_MSG
    action: 'aws:runCommand'
    inputs:
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          echo "*********************Initiating success_failure_MSG function*********************";
          dzdo  netstat -plten | grep  2181;
          if [[ ${?} -eq 0 ]];
          then
          echo "Zookeeper is running"
          else
          echo "Zookeeper might got Upgraded/installed, but there is trouble running the process";
          echo "Verify manually and  start the process."
          exit 1;
          fi
          echo "*********************END of success_failure_MSG function*********************";
    description: ' Printing Success Message'
    timeoutSeconds: 150
    isEnd: true
    isCritical: false
