description: |-
  *Replace this default text with instructions or other information about your document.*  

  ---
  # What is Markdown?
  Markdown is a lightweight markup language that converts your content with plain text formatting to structurally valid rich text.
  ## You can add headings
  You can add *italics* or make the font **bold**.  
  1. Create numbered lists 
  * Add bullet points 
  >Indent `code samples` 

  You can create a [link to another webpage](${ AWS_ENDPOINT }).
schemaVersion: '0.3'
parameters:
  ec2instanceidplaceholder:
    type: 'AWS::EC2::Instance::Id'
    default: i-0530b538bede8c0e8
  BASENIFIHOMEPATH:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/BASE_NIFI_HOMEPATH}}'
  nfS3DOWNLOADABSPATH:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/nifiS3_DOWNLOAD_ABSPATH}}'
  S3nfpathworkingABSPATH:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/S3_nifipath_working_ABSPATH}}'
  s3nifimisccopy:
    type: String
    default: '{{ssm:/nifi/nf_freshInstall/param/s3_nifi_misc_copy}}'
  NFDownloadFilename:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/NIFI_Download_Filename}}'
  NIFIPORT:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/NIFI_PORT}}'
  nfserverlist:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/nfserverlist}}'
  oldnfversion:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/oldnfversion}}'
  newnfversion:
    type: String
    default: '{{ssm:/nifi/nf_upgrade/param/newnfversion}}'
  zkserverlist:
    type: String
    description: (Required) List of comma separated hostnames where zookeeper is installed.
    default: '{{ssm:/nifi/zk_upgrade/param/zkserverlist}}'
  nfcertpath:
    type: String
    description: (Required) path from where you can download the certs. (do not put / at the end)
    default: '{{ssm:/nifi/nf_freshInstall/param/nf_cert_path}}'
  varlibconf:
    type: String
    description: (Required) path from where you can download the var_lib_conf_files. (do not put / at the end)
    default: '{{ssm:/nifi/nf_freshInstall/param/varlibconf}}'
mainSteps:
  - name: cleanup_forfreshInstall
    action: 'aws:runCommand'
    onFailure: Abort
    inputs:
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          echo "*********************Initiating cleanup_forfreshInstall function*********************";
          temp_cdir=bkp_NF_`date '+%m-%d-%Y_%N'`;
          dzdo mkdir -p /tmp/cleanup/${temp_cdir};
          dzdo chmod -R 777 /tmp/cleanup;
          dzdo mv {{BASENIFIHOMEPATH}} /tmp/cleanup/${temp_cdir}/;
          echo "*********************END of cleanup_forfreshInstall function*********************";
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
    timeoutSeconds: 150
    nextStep: userCreation
    isCritical: false
    description: Clean-up script to make sure we can rerun the fresh installation
  - name: userCreation
    action: 'aws:runCommand'
    inputs:
      Parameters:
        commands: |-
          echo "*********************Initiating userCreation function*********************";
          # Creating  nifi users and their home dirs
          useradd -m nifi;
          # Creating group named "apache-admin" & Adding users to it
          groupadd apache-admin;
          usermod -a -G apache-admin nifi;
          # Creating nifi dir and nifi dir
          dzdo mkdir -p {{BASENIFIHOMEPATH}};dzdo chown -R nifi:apache-admin {{BASENIFIHOMEPATH}};
          # Creating /var/run/nifi for nifi
          dzdo mkdir -p /var/run/nifi; dzdo chmod -R 755 /var/run/nifi; dzdo chown -R nifi:apache-admin /var/run/nifi;
          dzdo mkdir -p /var/log/nifi; dzdo chmod -R 755 /var/log/nifi; dzdo chown -R nifi:apache-admin /var/log/nifi;
          dzdo mkdir -p /var/lib/nifi/conf; dzdo chmod -R 755 /var/lib/nifi; dzdo chown -R nifi:apache-admin /var/lib/nifi;
          dzdo mkdir -p /opt/dtv; dzdo chmod -R 755 /opt/dtv; dzdo chown -R nifi:apache-admin /opt/dtv;
          echo "*********************END of userCreation function*********************";
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      DocumentName: AWS-RunShellScript
    timeoutSeconds: 150
    isCritical: false
    nextStep: nf_s3Download
    description: creating required user and group on the server
  - name: nf_s3Download
    action: 'aws:runCommand'
    inputs:
      Parameters:
        commands: |-
          echo "*********************Initiating nf_s3Download function*********************";
          # create dir if it dose not exits
          dzdo mkdir -p {{BASENIFIHOMEPATH}};
          dzdo chown -R nifi:apache-admin {{BASENIFIHOMEPATH}};
          aws s3 cp {{nfS3DOWNLOADABSPATH}}/{{NFDownloadFilename}} {{BASENIFIHOMEPATH}}/;
          if [[ ${?} -ne 0 ]];
          then
          echo -e "AWS copy Failed, Please check and make sure you have permission to copy. \n Server/Host should able to download it from the bucket you specified without keys"
          exit 1;
          fi
          dzdo chown -R nifi:apache-admin {{BASENIFIHOMEPATH}};
          echo "*********************END of nf_s3Download function*********************";
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      DocumentName: AWS-RunShellScript
    description: download the tar file from s3
    timeoutSeconds: 150
    nextStep: createNFKeytabs
    isCritical: false
  - name: createNFKeytabs
    action: 'aws:runCommand'
    description: ' Starting Zk Service'
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      Parameters:
        commands: |-
          echo "*********************Initiating createNFKeytabs*********************";
          #Creating NiFi Keytab
          echo "creating  NiFi keytabs"
          dzdo mkdir -p /opt/kerberos_Creationfiles;
          dzdo chown -R nifi:apache-admin;

          dzdo cd /opt/kerberos_Creationfiles;
          (dzdo cd /opt/kerberos_Creationfiles ; dzdo sh /opt/kerberos_Creationfiles/bias-create-svc-user_headless.sh /etc/security/keytabs/nifi.keytab "nifi/@DS.DTVENG.NET";)
          (dzdo cd /opt/kerberos_Creationfiles ; dzdo sh /opt/kerberos_Creationfiles/bias-create-svc-user.sh /etc/security/keytabs/nifi.service.keytab "nifi/${HOSTNAME}@DS.DTVENG.NET";)
          (dzdo cd /opt/kerberos_Creationfiles ; dzdo sh /opt/kerberos_Creationfiles/bias-create-svc-user.sh /etc/security/keytabs/spnego.service.keytab "HTTP/${HOSTNAME}@DS.DTVENG.NET";)
          # Permission for keytabs
          dzdo chmod 754 /etc/security/keytabs;
          dzdo chown -R  nifi:apache-admin /etc/security/keytabs/nifi.keytab;
          dzdo chmod 744 /etc/security/keytabs/nifi.keytab;
          dzdo chmod 744 /etc/security/keytabs/nifi.service.keytab;
          dzdo chmod 744 /etc/security/keytabs/spnego.service.keytab;
          dzdo chown -R  nifi:apache-admin /etc/security/keytabs/nifi*keytab;
          dzdo chown -R  nifi:apache-admin /etc/security/keytabs/spnego.service.keytab;
          dzdo ls -lart /etc/security/keytabs;
          echo "*********************End of createZKKeytabs*********************";
    timeoutSeconds: 150
    nextStep: fresh_installZK
    isCritical: false
  - name: fresh_installZK
    action: 'aws:runCommand'
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      Parameters:
        commands: |-
          echo "*********************Initiating fresh_installZK function*********************";
          #Creating Required Directories
          echo "creating Dirs"
          dzdo mkdir -p /etc/security/keytabs;
          dzdo chmod -R 755 /etc/security/keytabs;
          dzdo mkdir -p /var/run/nifi;dzdo chmod -R 755 /var/run/nifi;dzdo chown -R nifi:apache-admin /var/run/nifi;
          dzdo mkdir -p /var/log/nifi;dzdo chmod -R 755 /var/log/nifi;dzdo chown -R nifi:apache-admin /var/log/nifi;
          dzdo mkdir -p /var/lib/nifi/conf;dzdo chmod -R 755 /var/lib/nifi;dzdo chown -R nifi:apache-admin /var/lib/nifi;
          dzdo mkdir -p /opt/dtv;dzdo chmod -R 755 /opt/dtv;dzdo chown -R nifi:apache-admin /opt/dtv;
          dzdo mkdir -p /opt/nifi/security/pki;dzdo chmod -R 755 /opt/nifi/security/pki;
          dzdo chown -R nifi:apache-admin /opt/nifi/security/pki;
          aws s3 cp {{s3nifimisccopy}} /opt/dtv/NiFi_etc_Dir/ --recursive  --no-progress --quiet;
          dzdo chown -R nifi:apache-admin /opt/dtv/NiFi_etc_Dir;
          # extracting the tar.gz file
          case {{NFDownloadFilename}} in
          (*.tar.gz*)
          echo "extracting nifi from tar file";
          (cd {{BASENIFIHOMEPATH}}/; dzdo tar -xzf {{BASENIFIHOMEPATH}}/{{NFDownloadFilename}};)
          ;;
          (*.zip*)
           echo "extracting nifi from zip file";
          (cd {{BASENIFIHOMEPATH}}/; dzdo unzip {{BASENIFIHOMEPATH}}/{{NFDownloadFilename}};)
          ;;
          (*)
          echo " Invalid option, File name should be either tar.gz or zip extension"
          ;;
          esac
          # extracting dir name from filename
          NIFIDownload_Dirname=`echo {{NFDownloadFilename}} |  cut -d '-' -f 1-2`;
          #copying conf from s3 to new path
          cd {{BASENIFIHOMEPATH}}/;
          dzdo mv {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/conf {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/bkpORG_conf_`date '+%m-%d-%Y_%N'`;
          dzdo aws s3 cp {{S3nfpathworkingABSPATH}}/conf {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/conf/ --recursive --quiet ;
          dzdo chown -R nifi:apache-admin /opt/nifi;
          dzdo chmod -R 755 /opt/nifi;
          echo "installed nifi version is ${NIFIDownload_Dirname}";
          # updating zk info in nifi conf dir
          echo "*********************updating zk info in nifi conf dir*********************";
          echo "Removing lines from zookeeper.properties ";
          sed -i '/server\.[0-9]=/d' {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/conf/zookeeper.properties ;
          echo " zookeeper server list = {{zkserverlist}}";
          zkserverList_temp=`echo {{zkserverlist}} | sed 's/,/\ /g'`;
          echo "using for loop to update the config";
          varzkcount=0;
          for i in ${zkserverList_temp};
          do
          varzkcount=$((varzkcount + 1));
          echo "server.$varzkcount=${i}:2181" >> {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/conf/zookeeper.properties ;
          done;
          #updating zk connection string in nifi.properties
          temp1zkstr=`echo ${zkserverlist} | sed 's/,/:2181,/g'`;
          tempfnzkstr=`echo ${temp1zkstr} | sed 's/$/:2181/g'`;
          sed -i "s/^nifi\.zookeeper\.connect\.string=.*$/nifi\.zookeeper\.connect\.string=${tempfnzkstr}/" {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/conf/nifi.properties;
          echo "updated zookeeper connection string in nifi.properties file";
          sed -ir "s/<property\ name=\"Connect\ String\".*$/\<property\ name=\"Connect\ String\"\>${tempfnzkstr}\<\/property\>/" {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/conf/state-management.xml;
          echo "updated state-management.xml file in nifi conf";
          echo "*********************update done for zk info in nifi conf dir*********************";
          echo "updated state-management.xml file in nifi conf";
          # updating the files based on the server
          echo "updating nifi prop file";
          sed -i "s/^nifi\.web\.https\.host=.*$/nifi\.web\.https\.host=${HOSTNAME}/" {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/conf/nifi.properties ;
          sed -i "s/^nifi\.cluster\.node\.address=.*$/nifi\.cluster\.node\.address=${HOSTNAME}/" {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/conf/nifi.properties ;
          echo "updating nifi jaas conf";
          tf1=`klist -kt /etc/security/keytabs/nifi.service.keytab | grep nifi | cut -d ' ' -f 7 | cut -d '/' -f 1 | tr -d '\n'`;
          tf2=`klist -kt /etc/security/keytabs/nifi.service.keytab | grep nifi | cut -d ' ' -f 7 | cut -d '/' -f 2 | tr -d '\n'`;
          sed -i "s/^.*principal=.*$/principal=\"${tf1}\/${tf2}\";/" {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/conf/nifi_jaas.conf;
          echo "updating service principal and spnego principal in nifi prop file"
          sed -i "s/^nifi\.kerberos\.service\.principal=.*$/nifi\.kerberos\.service\.principal=${tf1}\/${tf2}/" {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/conf/zookeeper.properties ;
          sed -i "s/^nifi\.kerberos\.spnego\.principal=.*$/nifi\.kerberos\.spnego\.principal=HTTP\/${tf2}/" {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/conf/zookeeper.properties ;
          sed -i "s/^.*\"Root\ Node\".*$/\<property\ name=\"Root\ Node\"\>\/nifi_current\<\/property\>/" {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/conf/state-management.xml ;
          dzdo cp {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/conf/authorizers.xml {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/conf/bkp_authorizers.xml_`date '+%m-%d-%Y'`;
          sed -i '/^.*Node\ Identity.*$/d' {{BASENIFIHOMEPATH}}/${NIFIDownload_Dirname}/conf/authorizers.xml
          echo "Downloading certs"
          if [ -d "{{BASENIFIHOMEPATH}}/certs" ]; then dzdo mv {{BASENIFIHOMEPATH}}/certs {{BASENIFIHOMEPATH}}/bkp_certs_`date '+%Y_%N'`; fi;
          dzdo mkdir -p {{BASENIFIHOMEPATH}}/certs;
          dzdo chmod -R 755 {{BASENIFIHOMEPATH}}/certs;
          dzdo chown -R nifi:apache-admin {{BASENIFIHOMEPATH}}/certs
          echo "------------------ Doing S3 download for certs ----------------"
          echo "{{nfcertpath}} ${HOSTNAME}.zip";
          echo 'aws s3 cp \"{{nfcertpath}}/${HOSTNAME}.zip\"  {{BASENIFIHOMEPATH}}/certs/ --recursive;';
          dzdo aws s3 cp {{nfcertpath}}  {{BASENIFIHOMEPATH}}/certs/ --recursive;
          echo "------------------ End of S3 download for certs ----------------"
          dzdo chmod 775 {{BASENIFIHOMEPATH}}/certs/${HOSTNAME}.zip ;dzdo chown -R nifi:apache-admin {{BASENIFIHOMEPATH}}/certs;
          (cd {{BASENIFIHOMEPATH}}/certs; dzdo unzip {{BASENIFIHOMEPATH}}/certs/${HOSTNAME}.zip -d {{BASENIFIHOMEPATH}}/certs/temp/ ; )
          dzdo mkdir -p {{BASENIFIHOMEPATH}}/security/pki;
          dzdo chmod -R 755 {{BASENIFIHOMEPATH}}/security/pki;
          temp_certstr=`openssl x509 -in {{BASENIFIHOMEPATH}}/certs/temp/${HOSTNAME}.cer -text -noout | grep -i 'Subject\:\ C\ \=' | cut -d ':' -f 2 | sed "s/\ =\ /=/g"`;
          temp_noCN=`echo $temp_certstr | sed "s/CN=.*$/CN=/g"`;
          nfserverlist_temp=`echo {{nfserverlist}} | sed 's/,/\ /g'`;
          echo "using for loop to update Node Identity the config";
          varnfcount=0;
          for nfhost in ${nfserverlist_temp};
          do
          varnfcount=$((varnfcount + 1));
          temp_val=`echo "     <property name=\"Node Identity $varnfcount\">${temp_noCN}${nfhost}</property>"`;
          echo "adding this ${temp_val} for node identity";
          sed -i "/^.<\/authorizer>$/i ${temp_val}" authorizers.xml;
          done;
          (cd {{BASENIFIHOMEPATH}}/${ZKDownload_Dirname}/;echo "current dir : `pwd`";)
          echo "creating Symlink to currently installed nifi"
          unlink {{BASENIFIHOMEPATH}}/current_nifi;
          dzdo ln -s {{BASENIFIHOMEPATH}}/${ZKDownload_Dirname} {{BASENIFIHOMEPATH}}/current_nifi;
          dzdo chown -R nifi:apache-admin {{BASENIFIHOMEPATH}}/current_nifi;
          echo "Copying varlibconf"
          aws s3 cp {{varlibconf}} /var/lib/nifi/conf/ --recursive;
          (cd /var/lib/nifi/conf/; mv /var/lib/nifi/conf /var/lib/nifi/conf_`date '+%Y_%N'`;)
          dzdo chown -R nifi:apache-admin /var/lib/nifi/;
          echo "*********************END of fresh_installZK function*********************";
    description: fresh_installZK step for installing for first time on this server
    timeoutSeconds: 150
    nextStep: certs_prep_NIFI
    isCritical: false
  - name: certs_prep_NIFI
    action: 'aws:runCommand'
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      Parameters:
        commands: |-
          dzdo cp {{BASENIFIHOMEPATH}}/certs/temp/${HOSTNAME}.jks {{BASENIFIHOMEPATH}}/security/pki/nifi.jks;
          dzdo chmod -R 755 {{BASENIFIHOMEPATH}}/security/pki;
          default_nifi_jks={{BASENIFIHOMEPATH}}/security/pki/nifi.jks;
          echo "checking for cert password and extracting it"
          new_password=`cat {{BASENIFIHOMEPATH}}/current_nifi/conf/nifi.properties | grep 'nifi.security.truststorePasswd' | cut -d= -f2`;
          current_password=`cat  {{BASENIFIHOMEPATH}}/certs/temp/DELETEME.txt`;
          current_pwdfile={{BASENIFIHOMEPATH}}/certs/temp/DELETEME.txt;
          (echo "${new_password}" > {{BASENIFIHOMEPATH}}/certs/temp/new_DELETEME.txt);
          new_pwdfile={{BASENIFIHOMEPATH}}/certs/temp/new_DELETEME.txt
          echo "Building nifi.jks file with new password"
          keytool -storepasswd -new ${new_password} -keystore ${default_nifi_jks}  -storepass:file ${current_pwdfile};
          keytool -keypasswd -keypass:file ${current_pwdfile}  -new ${new_password} -alias ${HOSTNAME_t} -keystore ${default_nifi_jks} -storepass:file ${new_pwdfile};
    description: Prepping up the certs on NiFi server
    timeoutSeconds: 150
    nextStep: zk_asService
    isCritical: false
  - name: zk_asService
    action: 'aws:runCommand'
    description: ' Starting nf Service'
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      Parameters:
        commands: |-
          echo "*********************Initiating nf_asService function*********************";
          dzdo sh {{BASENIFIHOMEPATH}}/current_nifi/bin/nifi.sh install;
          SVC_FILE=/etc/init.d/nifi;
          sed -i 's/^.*NIFI_HOME=.*$/NIFI_HOME=\/opt\/nifi\/current_nifi/' ${SVC_FILE} ;
          echo "*********************END of nf_asService function*********************";
    timeoutSeconds: 150
    nextStep: startNFService
    isCritical: false
  - name: startNFService
    action: 'aws:runCommand'
    description: ' Starting NiFi Service'
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      Parameters:
        commands: |-
          echo "*********************Initiating startNFService*********************";
          dzdo service nifi start;
          if [[ ${?} -eq 0 ]];
          then
          echo "Started zookeeper";
          else
          echo "Unable to start zookeeper at this time.";
          echo "Please configure zookeeper as service.";
          fi
          dzdo chown -R nifi:apache-admin /var/run/nifi;
          dzdo chown -R nifi:apache-admin {{BASENIFIHOMEPATH}};
          dzdo chown -R nifi:apache-admin /var/log/nifi;
          dzdo chown -R nifi:apache-admin /var/lib/nifi;
          dzdo chmod -R 755 /var/run/nifi;
          dzdo chmod -R 755 /var/log/nifi;
          dzdo chmod -R 755 /opt/nifi;
          dzdo chmod -R 755 /var/lib/nifi;
          echo "*********************End of startNFService*********************";
    timeoutSeconds: 150
    nextStep: success_failure_MSG
    isCritical: false
  - name: success_failure_MSG
    action: 'aws:runCommand'
    inputs:
      InstanceIds:
        - '{{ec2instanceidplaceholder}}'
      DocumentName: AWS-RunShellScript
      Parameters:
        commands: |-
          echo "*********************Initiating success_failure_MSG function*********************";
          dzdo  netstat -plten | grep  {{NIFIPORT}};
          if [[ ${?} -eq 0 ]];
          then
          echo "NiFi is running"
          else
          echo "NiFi might got installed, but there is trouble running the process";
          echo "Verify Logs manually and  start the process."
          exit 1;
          fi
          echo "*********************END of success_failure_MSG function*********************";
    description: ' Printing Success Message'
    timeoutSeconds: 150
    isEnd: true
    isCritical: false
